import type * as API from './graphql-ui-layout-api';
declare class ZeropointClient implements API.APIClient {
    private config;
    private auth;
    constructor(config: API.APIConfig, auth?: API.AuthConfig);
    private request;
    getHealth(): Promise<API.HealthCheck>;
    executeQuery(request: API.GraphQL.QueryRequest): Promise<API.GraphQL.QueryResponse>;
    getSchema(): Promise<API.GraphQL.SchemaResponse>;
    getTypes(): Promise<API.GraphQL.TypesResponse>;
    getQueries(): Promise<API.GraphQL.QueriesResponse>;
    getMutations(): Promise<API.GraphQL.MutationsResponse>;
    validateQuery(query: string): Promise<API.GraphQL.ValidationResponse>;
    getUILayout(page?: string, includeOfflineData?: boolean): Promise<API.UILayout.LayoutResponse>;
    getNavigation(page?: string): Promise<API.UILayout.NavigationResponse>;
    getSidebar(page: string): Promise<API.UILayout.SidebarResponse>;
    getContentAreas(page?: string): Promise<API.UILayout.ContentAreasResponse>;
    getWidgets(page?: string): Promise<API.UILayout.WidgetsResponse>;
    getActions(page?: string): Promise<API.UILayout.ActionsResponse>;
    getTheme(): Promise<API.UILayout.ThemeResponse>;
    getConfig(): Promise<API.UILayout.ConfigResponse>;
    getOfflineData(): Promise<API.UILayout.OfflineDataResponse>;
    getPermissions(): Promise<API.UILayout.PermissionsResponse>;
    getCacheKeys(): Promise<API.UILayout.CacheKeysResponse>;
    getCacheKeys(params?: API.Cache.CacheKeysParams): Promise<API.Cache.CacheKeysResponse>;
    clearCache(): Promise<API.UILayout.CacheClearResponse>;
    updateTheme(theme: Partial<API.UILayout.Theme>): Promise<API.UILayout.ThemeResponse>;
    updateConfig(config: Partial<API.UILayout.AppConfig>): Promise<API.UILayout.ConfigResponse>;
    globalSearch(params: API.Search.SearchParams): Promise<API.Search.GlobalSearchResponse>;
    searchPosts(params: API.Search.PostSearchParams): Promise<API.Search.PostSearchResponse>;
    searchUsers(params: API.Search.UserSearchParams): Promise<API.Search.UserSearchResponse>;
    searchTags(params: API.Search.TagSearchParams): Promise<API.Search.TagSearchResponse>;
    getSuggestions(params: API.Search.SuggestionsParams): Promise<API.Search.SuggestionsResponse>;
    getSearchStats(): Promise<API.Search.SearchStatsResponse>;
    reindexSearch(models?: string[]): Promise<API.Search.ReindexResponse>;
    uploadFile(request: API.Files.FileUploadRequest): Promise<API.Files.FileUploadResponse>;
    getFile(id: number): Promise<API.Files.FileResponse>;
    listFiles(params?: API.Files.FileListParams): Promise<API.Files.FileListResponse>;
    updateFile(id: number, request: API.Files.FileUpdateRequest): Promise<API.Files.FileUpdateResponse>;
    deleteFile(id: number): Promise<API.Files.FileDeleteResponse>;
    getFileStats(): Promise<API.Files.FileStatsResponse>;
    getFileCategories(): Promise<API.Files.FileCategoriesResponse>;
    getFileTags(): Promise<API.Files.FileTagsResponse>;
    bulkUpload(request: API.Files.BulkUploadRequest): Promise<API.Files.BulkUploadResponse>;
    getFileURL(id: number, expiresIn?: number): Promise<API.Files.FileURLResponse>;
    getPageViews(params?: API.Analytics.PageViewsParams): Promise<API.Analytics.PageViewsResponse>;
    getUserActivity(params?: API.Analytics.UserActivityParams): Promise<API.Analytics.UserActivityResponse>;
    getSearchAnalytics(params?: API.Analytics.SearchAnalyticsParams): Promise<API.Analytics.SearchAnalyticsResponse>;
    getFileUploadAnalytics(params?: API.Analytics.FileUploadAnalyticsParams): Promise<API.Analytics.FileUploadAnalyticsResponse>;
    getEngagement(params?: API.Analytics.EngagementParams): Promise<API.Analytics.EngagementResponse>;
    getDashboard(): Promise<API.Analytics.DashboardResponse>;
    trackEvent(request: API.Analytics.TrackEventRequest): Promise<API.Analytics.TrackEventResponse>;
    getPopularContent(params?: API.Analytics.PopularContentParams): Promise<API.Analytics.PopularContentResponse>;
    getRetention(params?: API.Analytics.RetentionParams): Promise<API.Analytics.RetentionResponse>;
    getNotifications(params?: API.Notifications.NotificationParams): Promise<API.Notifications.NotificationListResponse>;
    getNotification(id: number): Promise<API.Notifications.NotificationResponse>;
    markNotificationAsRead(id: number): Promise<API.Notifications.NotificationReadResponse>;
    markAllNotificationsAsRead(): Promise<API.Notifications.NotificationReadAllResponse>;
    deleteNotification(id: number): Promise<API.Notifications.NotificationDeleteResponse>;
    getNotificationStats(): Promise<API.Notifications.NotificationStatsResponse>;
    getNotificationPreferences(): Promise<API.Notifications.NotificationPreferencesResponse>;
    updateNotificationPreferences(preferences: Partial<API.Notifications.NotificationPreferences>): Promise<API.Notifications.NotificationPreferencesUpdateResponse>;
    sendTestNotification(request: API.Notifications.TestNotificationRequest): Promise<API.Notifications.TestNotificationResponse>;
    getNotificationTemplates(): Promise<API.Notifications.NotificationTemplatesResponse>;
    getCacheStats(): Promise<API.Cache.CacheStatsResponse>;
    getCacheValue(key: string): Promise<API.Cache.CacheKeyValueResponse>;
    setCacheValue(key: string, request: API.Cache.CacheSetRequest): Promise<API.Cache.CacheSetResponse>;
    deleteCacheKey(key: string): Promise<API.Cache.CacheDeleteResponse>;
    clearCachePattern(pattern: string): Promise<API.Cache.CacheClearPatternResponse>;
    clearAllCache(): Promise<API.Cache.CacheClearAllResponse>;
    getCacheMemory(): Promise<API.Cache.CacheMemoryResponse>;
    getCachePerformance(): Promise<API.Cache.CachePerformanceResponse>;
    warmUpCache(patterns?: string[]): Promise<API.Cache.CacheWarmUpResponse>;
    getCacheConfig(): Promise<API.Cache.CacheConfigResponse>;
    updateCacheConfig(config: Partial<API.Cache.CacheConfig>): Promise<API.Cache.CacheConfigUpdateResponse>;
}
export declare function createClient(config: API.APIConfig, auth?: API.AuthConfig): API.APIClient;
export { ZeropointClient };
export type { APIConfig, AuthConfig, APIResponse, PaginationParams, PaginatedResponse, HealthCheck } from './graphql-ui-layout-api';
//# sourceMappingURL=graphql-ui-layout-client.d.ts.map