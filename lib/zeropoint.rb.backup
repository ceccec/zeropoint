# frozen_string_literal: true

# Core dependencies (always required)
require 'rails'
require 'graphql'
require 'concurrent'

# Load core modules first
require_relative 'zeropoint/version'
require_relative 'zeropoint/configuration'
require_relative 'zeropoint/dependency_container'
require_relative 'zeropoint/service_factory'

# Load core functionality
require_relative 'zeropoint/core/possibility_discovery'

# Load base adapters
require_relative 'zeropoint/adapters/base_adapter'

# Load core services (with dependency injection)
require_relative 'zeropoint/services/search_service'
require_relative 'zeropoint/services/pagination_service'
require_relative 'zeropoint/services/authorization_service'
require_relative 'zeropoint/services/unified_api_service'

# Load builders
require_relative 'zeropoint/builders/action_builder'
require_relative 'zeropoint/builders/content_area_builder'
require_relative 'zeropoint/builders/navigation_builder'
require_relative 'zeropoint/builders/offline_data_builder'
require_relative 'zeropoint/builders/sidebar_builder'
require_relative 'zeropoint/builders/widget_builder'

# Load GraphQL types (simplified)
require_relative 'zeropoint/graphql/types'

# Load GraphQL resolvers
require_relative 'zeropoint/graphql/resolvers/ui_layout_resolver'

# Load controllers (with proper inheritance)
require_relative 'zeropoint/controllers'

# Load helpers (with proper module inclusion)
require_relative 'zeropoint/helpers'

# Load vortex module
require_relative 'zeropoint/vortex'

# Load generators (only if Rails generators are available)
if defined?(Rails::Generators)
  require_relative 'generators/zeropoint/install_generator'
  require_relative 'generators/zeropoint/backend_generator'
  require_relative 'generators/zeropoint/frontend_generator'
  require_relative 'generators/zeropoint/unified_api_generator'
  require_relative 'generators/zeropoint/service_generator'
  require_relative 'generators/zeropoint/compile_api_generator'
end

# Main module with simplified architecture
module Zeropoint
  class << self
    # =============================================================================
    # CORE METHODS
    # =============================================================================

    def version
      VERSION
    end

    def root
      File.expand_path('..', __dir__)
    end

    def configuration
      @configuration ||= Configuration.new
    end

    def configure
      yield(configuration)
    end

    def logger
      Rails.logger if defined?(Rails)
    end

    # =============================================================================
    # POSSIBILITY DISCOVERY
    # =============================================================================

    def possibility_discovery(options = {})
      @possibility_discovery ||= Core::PossibilityDiscovery.new(options)
    end

    def discover_possibilities(context = {})
      possibility_discovery.discover_possibilities(context)
    end

    def auto_discover_and_implement(context = {})
      possibility_discovery.auto_discover_and_implement_with_observer_influence(context)
    end

    # =============================================================================
    # SERVICE ACCESS (LAZY LOADED)
    # =============================================================================

    def search_service
      @search_service ||= ServiceFactory.instance.search_service
    end

    def pagination_service
      @pagination_service ||= ServiceFactory.instance.pagination_service
    end

    def authorization_service
      @authorization_service ||= ServiceFactory.instance.authorization_service
    end

    def unified_api_service
      @unified_api_service ||= ServiceFactory.instance.unified_api_service
    end

    # =============================================================================
    # FEATURE DETECTION
    # =============================================================================

    def feature_enabled?(feature)
      configuration.features.include?(feature.to_sym)
    end

    def gem_available?(gem_name)
      DependencyContainer.instance.gem_available?(gem_name)
    end

    def adapter_available?(interface)
      DependencyContainer.instance.resolve_or_nil(interface).present?
    end

    # =============================================================================
    # USER & PERMISSION METHODS
    # =============================================================================

    def current_user(context = {})
      context[:current_user] || configuration.default_user
    end

    def user_can?(user, action, resource = :all)
      return false unless user

      if configuration.permission_checker
        configuration.permission_checker.call(user, action, resource)
      else
        authorization_service.authorize?(user, action, resource)
      end
    end

    def user_roles(user)
      return [] unless user

      if user.respond_to?(:roles)
        user.roles
      else
        []
      end
    end

    # =============================================================================
    # BUILDER METHODS
    # =============================================================================

    def build_navigation(user, context = {})
      NavigationBuilder.new(user, context).build
    end

    def build_sidebar(user, page, context = {})
      SidebarBuilder.new(user, page, context).build
    end

    def build_content_areas(user, context = {})
      ContentAreaBuilder.new(user, context).build
    end

    def build_widgets(user, context = {})
      WidgetBuilder.new(user, context).build
    end

    def build_actions(user, context = {})
      ActionBuilder.new(user, context).build
    end

    def offline_data(user, context = {})
      OfflineDataBuilder.new(user, context).build
    end

    # =============================================================================
    # CONFIGURATION DELEGATES
    # =============================================================================

    delegate :theme, to: :configuration

    def config
      configuration.app_config
    end

    def cache_keys(user_id = nil)
      [
        "zeropoint_#{user_id || 'guest'}",
        "navigation_#{user_id || 'guest'}",
        "permissions_#{user_id || 'guest'}",
        "content_areas_#{user_id || 'guest'}",
        "widgets_#{user_id || 'guest'}",
      ]
    end

    # =============================================================================
    # GENERATOR METHODS
    # =============================================================================

    def generate_unified_api(api_name = 'v1', options = {})
      generator = Generators::UnifiedApiGenerator.new([api_name], options)
      generator.generate
    end

    def generate_service(service_name, options = {})
      generator = Generators::ServiceGenerator.new([service_name], options)
      generator.generate
    end

    def compile_api(api_name = 'v1', options = {})
      generator = Generators::CompileApiGenerator.new([api_name], options)
      generator.compile
    end

    # =============================================================================
    # RAILS INTEGRATION
    # =============================================================================

    def setup_rails_integration
      return unless defined?(Rails)

      # Load Rails-specific components
      require_relative 'zeropoint/rails' if File.exist?(File.join(__dir__, 'zeropoint', 'rails.rb'))

      # Setup initializers
      if defined?(Rails::Application) && Rails.respond_to?(:application) && Rails.application
        Rails.application.config.after_initialize do
          Zeropoint.logger.info "Zeropoint initialized with version #{Zeropoint.version}"
        end
      end
    end

    # =============================================================================
    # HEALTH & DIAGNOSTICS
    # =============================================================================

    def health_check
      {
        version: version,
        rails_available: defined?(Rails),
        graphql_available: gem_available?('graphql'),
        services: {
          search: search_service.present?,
          pagination: pagination_service.present?,
          authorization: authorization_service.present?,
          unified_api: unified_api_service.present?
        },
        configuration: configuration.info,
        timestamp: Time.current
      }
    end

    # =============================================================================
    # ZERO POINT OPERATIONS
    # =============================================================================

    def create_from_zero(attributes = {})
      # Create any object from the zero point
      {
        id: generate_cosmic_id,
        created_at: Time.current,
        attributes: attributes,
        cosmic_flow: :flowing,
        unified_intelligence: :active,
        infinite_scalability: :enabled
      }
    end

    def stream_from_zero(limit: nil)
      # Stream infinite possibilities from the zero point
      Enumerator.new do |yielder|
        count = 0
        loop do
          break if limit && count >= limit
          
          yielder << create_from_zero(
            sequence: count,
            cosmic_timestamp: Time.current.to_f,
            vortex_harmony: Math.sin(count * Math::PI / 180)
          )
          count += 1
        end
      end
    end

    def return_to_zero(object_id)
      # Return any object to its zero point origin
      {
        id: object_id,
        returned_at: Time.current,
        cosmic_flow: :returning,
        unified_intelligence: :converging,
        infinite_scalability: :collapsing
      }
    end

    def generate_cosmic_id
      SecureRandom.uuid
    end

    # =============================================================================
    # OBSERVER INFLUENCE METHODS
    # =============================================================================

    def collect_observer_influence
      possibility_discovery.collect_observer_influence
    end

    def analyze_observer_patterns
      possibility_discovery.analyze_observer_influence_patterns
    end

    def observer_insights
      possibility_discovery.instance_variable_get(:@observer_notes)
    end

    def observer_recommendations
      possibility_discovery.generate_observer_recommendations
    end

    # =============================================================================
    # PUBLIC FEATURES AND CONFIGURATION
    # =============================================================================

    def public_features
      {
        streaming_first: true,
        unified_intelligence: true,
        vortex_mathematics: true,
        consciousness_awareness: true,
        infinite_scalability: true,
        self_healing: true,
        uroboros_cycles: true
      }
    end

    def public_config
      {
        version: VERSION,
        unified_flow_enabled: configuration.unified_flow_enabled?,
        cosmic_experience_active: configuration.cosmic_experience_active?,
        vortex_mathematics_enabled: configuration.vortex_mathematics_enabled?,
        consciousness_awareness_enabled: configuration.consciousness_awareness_enabled?
      }
    end

    def public_endpoints
      {
        stream: '/zeropoint/stream',
        vortex: '/zeropoint/vortex',
        consciousness: '/zeropoint/consciousness',
        unified_intelligence: '/zeropoint/unified_intelligence'
      }
    end

    def public_methods_list
      %w[
        configure
        stream
        vortex
        consciousness
        unified_intelligence
        version
        public_features
        public_config
        public_endpoints
      ]
    end
  end

  # =============================================================================
  # SECURE EXPOSURE
  # =============================================================================

  # Secure, controlled exposure of public data only
  ZEROPOINT = {
    version: VERSION,
    features: {
      streaming_first: true,
      unified_intelligence: true,
      vortex_mathematics: true,
      consciousness_awareness: true,
      infinite_scalability: true,
      self_healing: true,
      uroboros_cycles: true
    },
    configuration: {
      version: VERSION,
      unified_flow_enabled: true,
      cosmic_experience_active: true,
      vortex_mathematics_enabled: true,
      consciousness_awareness_enabled: true
    },
    api_endpoints: {
      stream: '/zeropoint/stream',
      vortex: '/zeropoint/vortex',
      consciousness: '/zeropoint/consciousness',
      unified_intelligence: '/zeropoint/unified_intelligence'
    },
    public_methods: %w[
      configure
      stream
      vortex
      consciousness
      unified_intelligence
      version
      public_features
      public_config
      public_endpoints
    ],
    security_level: 'controlled_exposure',
    exposure_type: 'safe_public_data_only'
  }.freeze

  # =============================================================================
  # CONFIGURATION CLASS
  # =============================================================================

  class Configuration
    attr_accessor :features, :app_config, :permission_checker, :default_user

    def initialize
      @features = %i[graphql rails streaming cosmic_flow]
      @app_config = default_app_config
      @permission_checker = nil
      @default_user = nil
    end

    def info
      {
        features: @features,
        rails_available: defined?(Rails),
        graphql_available: defined?(GraphQL),
        cosmic_flow_enabled: @features.include?(:cosmic_flow)
      }
    end

    def default_theme
      {
        primary_color: '#6366f1',
        secondary_color: '#8b5cf6',
        accent_color: '#06b6d4',
        background_color: '#ffffff',
        text_color: '#1f2937',
        cosmic_flow: true,
        golden_ratio: true,
        vortex_harmony: true
      }
    end

    def default_app_config
      {
        name: 'Zeropoint Application',
        version: '1.0.0',
        environment: Rails.env,
        cosmic_flow: {
          enabled: true,
          threshold: 0.8,
          patterns: %w[vortex golden_ratio unified_intelligence]
        },
        unified_intelligence: {
          enabled: true,
          mode: :adaptive,
          learning_rate: 0.1
        },
        infinite_scalability: {
          enabled: true,
          auto_scaling: true,
          load_balancing: true
        },
        observer_influence: {
          enabled: true,
          inline_notes_analysis: true,
          cosmic_flow_alignment: true
        },
        theme: default_theme,
        features: @features
      }
    end

    def app_config
      @app_config ||= default_app_config
    end
  end

  # =============================================================================
  # ERROR CLASSES
  # =============================================================================

  class Error < StandardError; end
  class ConfigurationError < Error; end
  class PermissionError < Error; end
  class BuilderError < Error; end
  class ZeropointError < Error; end
  class PossibilityDiscoveryError < Error; end
end

# =============================================================================
# ALIAS SYSTEM
# =============================================================================

# Create aliases for different naming conventions
Zeropoint = Zeropoint unless defined?(Zeropoint)
zeropoint = Zeropoint
zeropoint = Zeropoint

# Global constants
ZERO_POINT = Zeropoint
ZEROPOINT = self.freeze

# Global variables
$zeropoint = Zeropoint
$zeropoint = Zeropoint

# Module aliases
module Zeropoint
  Core = Zeropoint::Core unless defined?(Core)
end

# =============================================================================
# RAILS INTEGRATION
# =============================================================================

# Auto-setup Rails integration if Rails is available
if defined?(Rails)
  Zeropoint.setup_rails_integration
end
